package forms.admin;

import datos.Administradores;
import entidades.Administrador;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import miselaneos.FrmIntern;
import static sistema_clinica_araujo.JFrame_Sistema.iconos;

/**
 *
 * @author OBREGON
 */
public class FrmSetAdmin extends FrmIntern {
    public static int id = 19;
    private int id_admin = 0;

    /**
     * Creates new form Frm_Pacientes
     */
    /**
    * Constructor de la clase FrmSetAdmin.
    * Inicializa los componentes y carga los datos del administrador.
    */
   public FrmSetAdmin() {
       initComponents();
       _loadAdministrador();
   }

   /**
    * Método para cargar los datos del administrador desde la base de datos.
    * Se ejecuta en un hilo separado para no bloquear la interfaz gráfica del usuario.
    * Desactiva el botón de edición mientras carga los datos y lo vuelve a activar una vez completado.
    */
   private void _loadAdministrador() {
       if (!btnEdit.isEnabled()) {
           return;
       }
       Thread t = new Thread(new Runnable() {
           @Override
           public void run() {
               btnEdit.setEnabled(false);
               ArrayList<Administrador> AdminList = new ArrayList<Administrador>();
               Administradores cnx = new Administradores();

               // Verifica si la conexión a la base de datos es correcta
               if (cnx.isOkConexion()) {
                   // Obtiene la lista de administradores desde la base de datos
                   AdminList = cnx.list("SELECT * FROM " + cnx.getTabla());
                   cnx.isCloseConexion(); // Cierra la conexión
               }

               // Recorre la lista de administradores y carga los datos del administrador actual
               for (int index = 0; index < AdminList.size(); index++) {
                   Administrador admin = AdminList.get(index);
                   id_admin = admin.getId();
                   txtUsuarioActual.setText(admin.getUsuario());
                   txtClaveActual.setText(admin.getClave());
               }
               btnEdit.setEnabled(true); // Reactiva el botón de edición
           }
       });
       t.start(); // Inicia el hilo
   }

   /**
    * Método para validar los datos del administrador.
    * Verifica que el usuario y la clave no estén vacíos.
    *
    * @param admin El objeto Administrador a validar.
    * @return true si los datos son válidos, false de lo contrario.
    */
   private boolean _isValidate(Administrador admin) {
       boolean isOk = false;

       if (admin.getUsuario().trim().isEmpty()) {
           JOptionPane.showMessageDialog(pnlNuevo1, "No Ha Ingresado Usuario.-", "Aviso", JOptionPane.WARNING_MESSAGE);
           return isOk;
       } else if (admin.getClave().trim().isEmpty()) {
           JOptionPane.showMessageDialog(pnlNuevo1, "No Ha Ingresado Clave.-", "Aviso", JOptionPane.WARNING_MESSAGE);
           return isOk;
       }
       isOk = true;
       return isOk;
   }

   /**
    * Método para obtener los datos del administrador desde el formulario.
    *
    * @return Un objeto Administrador con los datos del formulario.
    */
   private Administrador _getAdministradorForm() {
       Administrador admin = new Administrador(0, "", "");
       admin.setId(id_admin);
       admin.setUsuario(txtUsuarioNuevo.getText().trim());
       admin.setClave(txtClaveNuevo.getText().trim());
       return admin;
   }

   /**
    * Método para limpiar los campos del formulario del administrador.
    */
   private void _cleanForm() {
       txtUsuarioNuevo.setText("");
       txtClaveNuevo.setText("");
   }

   /**
    * Método para actualizar los datos del administrador en la base de datos.
    * Verifica si los datos del administrador son válidos antes de actualizar.
    *
    * @return true si los datos se actualizaron correctamente, false de lo contrario.
    */
   private boolean _isUpdate() {
       boolean isOk = false;
       Administrador admin = _getAdministradorForm();

       if (_isValidate(admin)) {
           Administradores cnx = new Administradores();

           if (cnx.isOkConexion()) {
               isOk = cnx.isUpdate(admin);

               if (isOk) {
                   cnx.isCloseConexion();
                   _cleanForm();
               } else {
                   cnx.isCancelConexion();
               }
           }
       }
       return isOk;
   }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlActual = new javax.swing.JPanel();
        pnlActual1 = new javax.swing.JPanel();
        labelEsp2 = new etiquetas.Lbl();
        txtUsuarioActual = new javax.swing.JTextField();
        labelEsp3 = new etiquetas.Lbl();
        txtClaveActual = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        pnlNuevo = new javax.swing.JPanel();
        pnlNuevo1 = new javax.swing.JPanel();
        labelEsp = new etiquetas.Lbl();
        txtUsuarioNuevo = new javax.swing.JTextField();
        labelEsp1 = new etiquetas.Lbl();
        btnEdit = new botones.BtnEdit();
        jLabel2 = new javax.swing.JLabel();
        txtClaveNuevo = new javax.swing.JTextField();

        setMaximizable(false);
        setResizable(false);
        setTitle("Administrador");
        setFrameIcon(iconos.getEspecialidad(16));
        getContentPane().setLayout(new java.awt.BorderLayout());

        pnlActual.setLayout(new java.awt.BorderLayout());

        labelEsp2.setText("Usuario");

        labelEsp3.setText("Clave");

        jLabel1.setText("Usuario y Contraseña Actual");

        javax.swing.GroupLayout pnlActual1Layout = new javax.swing.GroupLayout(pnlActual1);
        pnlActual1.setLayout(pnlActual1Layout);
        pnlActual1Layout.setHorizontalGroup(
            pnlActual1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActual1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(pnlActual1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEsp2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEsp3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(pnlActual1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtClaveActual)
                    .addComponent(txtUsuarioActual, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlActual1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(123, 123, 123))
        );
        pnlActual1Layout.setVerticalGroup(
            pnlActual1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActual1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(pnlActual1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUsuarioActual)
                    .addComponent(labelEsp2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(pnlActual1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtClaveActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEsp3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(173, Short.MAX_VALUE))
        );

        pnlActual.add(pnlActual1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlActual, java.awt.BorderLayout.CENTER);

        pnlNuevo.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pnlNuevo.setPreferredSize(new java.awt.Dimension(320, 279));
        pnlNuevo.setLayout(new java.awt.BorderLayout());

        labelEsp.setText("Usuario");

        labelEsp1.setText("Clave");

        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jLabel2.setText("Nuevo Usuario y Contraseña");

        javax.swing.GroupLayout pnlNuevo1Layout = new javax.swing.GroupLayout(pnlNuevo1);
        pnlNuevo1.setLayout(pnlNuevo1Layout);
        pnlNuevo1Layout.setHorizontalGroup(
            pnlNuevo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNuevo1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(pnlNuevo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNuevo1Layout.createSequentialGroup()
                        .addGroup(pnlNuevo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEsp1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(pnlNuevo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsuarioNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addGroup(pnlNuevo1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtClaveNuevo))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNuevo1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(67, 67, 67))))
        );
        pnlNuevo1Layout.setVerticalGroup(
            pnlNuevo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNuevo1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(pnlNuevo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUsuarioNuevo)
                    .addComponent(labelEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(pnlNuevo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEsp1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtClaveNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        pnlNuevo.add(pnlNuevo1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlNuevo, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (!btnEdit.isEnabled()) {
            return;
        }
        if (_isUpdate()) {
            _loadAdministrador();
        }
    }//GEN-LAST:event_btnEditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private botones.BtnEdit btnEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private etiquetas.Lbl labelEsp;
    private etiquetas.Lbl labelEsp1;
    private etiquetas.Lbl labelEsp2;
    private etiquetas.Lbl labelEsp3;
    private javax.swing.JPanel pnlActual;
    private javax.swing.JPanel pnlActual1;
    private javax.swing.JPanel pnlNuevo;
    private javax.swing.JPanel pnlNuevo1;
    private javax.swing.JPasswordField txtClaveActual;
    private javax.swing.JTextField txtClaveNuevo;
    private javax.swing.JTextField txtUsuarioActual;
    private javax.swing.JTextField txtUsuarioNuevo;
    // End of variables declaration//GEN-END:variables
}
